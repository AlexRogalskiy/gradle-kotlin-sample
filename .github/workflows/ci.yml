name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [ opened, synchronize ]

env:
  CI: true
  LANG: "en_US.UTF-8"
  LC_MESSAGES: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  LANGUAGE: "en_US:en"
  JAVA_OPTS: -Xms512m -Xmx1024m
  GRADLE_OPTS: >-
    -Dorg.gradle.configureondemand=true -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-Xmx3g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 2

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - name: Make checksum executable
        run: chmod +x ./scripts/checksum.sh

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Install JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Generate cache key
        run: ./scripts/checksum.sh checksum.txt

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Chmod permissions
        run: sudo chmod +x ./gradlew

      - name: Check Dependency Updates
        run: ./gradlew dependencyUpdates -Drevision=release

      - uses: actions/cache@v2.1.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('checksum.txt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  check-style:
    needs: setup
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 2

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - uses: actions/cache@v2.1.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('checksum.txt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Chmod permissions
        run: sudo chmod +x ./gradlew

      - name: Run Ktlint
        run: ./gradlew ktlintCheck

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Run Spotless
        run: ./gradlew spotlessCheck

      - name: (Fail-only) Bundle the build report
        if: failure()
        run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

      - name: (Fail-only) Upload the build report
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: error-report
          path: build-reports.zip

  build:
    needs: check-style
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 2

      - name: Prepare git
        run: |
          git config --global core.autocrlf false
          git config --global core.ignorecase false
          git config --global help.autocorrect 1
          git config --global core.fileMode false

      - name: Prepare repository
        run: git fetch --unshallow --tags

      - uses: actions/cache@v2.1.3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('checksum.txt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create Build Report
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: assembleDebug --scan
          failOnError: true
        id: gradle

      - name: Upload Sample Artifacts
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: build
          path: libs

      - name: Publish Build Report As Comment If Failure
        uses: mshick/add-pr-comment@v1
        if: failure()
        with:
          message: Build failed ${{ steps.gradle.outputs.build-scan-url }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false
